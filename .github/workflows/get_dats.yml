name: Get DATs

on:
  workflow_dispatch:
  schedule:
    # Run everyday at 8:00 UTC
    - cron: "0 8 * * *"

defaults:
  run:
    shell: powershell

env:
  DATS_DIR: "dats"
  WWW_URL: "https://alvaromunoz.github.io/auto-wwwdat"

jobs:
  no-intro:
    name: Download no-intro DATs
    runs-on: windows-latest

    steps:
      - name: Download no-intro DATs
        run: |

          $session = New-Object Microsoft.PowerShell.Commands.WebRequestSession
          $session.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.66 Safari/537.36 Edg/103.0.1264.44"

          $datomatic_download_page = Invoke-WebRequest -UseBasicParsing -Uri "https://datomatic.no-intro.org/index.php?page=download&s=64&op=daily" `
            -Method "POST" `
            -WebSession $session `
            -ContentType "application/x-www-form-urlencoded" `
            -Body "dat_type=standard&goooo=Prepare" `
            -MaximumRedirection 0 `
            -ErrorAction Ignore `
            -Headers @{
            "authority"       = "datomatic.no-intro.org"
            "method"          = "POST"
            "path"            = "/index.php?page=download&s=64&op=daily"
            "scheme"          = "https"
            "accept"          = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
            "accept-encoding" = "gzip, deflate, br"
            "cache-control"   = "max-age=0"
            "dnt"             = "1"
            "origin"          = "https://datomatic.no-intro.org"
            "referer"         = "https://datomatic.no-intro.org/index.php?page=download&s=64&op=daily"
          }
          $cookie_data = $datomatic_download_page.Headers.'Set-Cookie' -split ';' -match 'PHPSESSID.+' -split '='
          $session.Cookies.Add((New-Object System.Net.Cookie($cookie_data[0], $cookie_data[1], "/", "datomatic.no-intro.org")))
          $datomatic_download_page.RawContent -match "Location: (.+)"
          $datomatic_download_path = $Matches[1]

          $ProgressPreference = 'SilentlyContinue'
          $nointro_download_url = "https://datomatic.no-intro.org/{0}" -f $datomatic_download_path
          $nointro_download_dest = "./no-intro.zip"
          Invoke-WebRequest -UseBasicParsing -Uri $nointro_download_url `
            -Method "POST" `
            -WebSession $session `
            -ContentType "application/x-www-form-urlencoded" `
            -OutFile $nointro_download_dest `
            -Body "lazy_mode=Download" `
            -Headers @{
            "authority"       = "datomatic.no-intro.org"
            "method"          = "POST"
            "path"            = "/$datomatic_download_path"
            "scheme"          = "https"
            "accept"          = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
            "accept-encoding" = "gzip, deflate, br"
            "cache-control"   = "max-age=0"
            "dnt"             = "1"
            "origin"          = "https://datomatic.no-intro.org"
          }

      - name: Extract zip file
        run: |
          $temp_dir_name = "temp"
          if (Test-Path -Path $temp_dir_name) {
              Remove-Item $temp_dir_name -Recurse
          }
          $dats_dir = New-Item -Path $temp_dir_name -ItemType Directory
                    
          $zip_file = Get-Item -Path "./no-intro.zip"

          Expand-Archive -LiteralPath $zip_file.FullName -DestinationPath $dats_dir.FullName

          Write-Output "ZIP_FILEPATH=$dats_dir" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

      - name: Upload no-intro DATS
        uses: actions/upload-artifact@v3
        with:
          name: dats-no-intro
          path: ${{ env.ZIP_FILEPATH }}/*.dat
          if-no-files-found: error
          retention-days: 1

  redump:
    name: Download Redump DATs
    runs-on: windows-latest
    steps:
      - name: Download redump DATs
        run: |
          $redump_baseurl = "http://redump.org"
          $redump_download_page = Invoke-WebRequest -Uri "$redump_baseurl/downloads/"
          $redump_download_list = $redump_download_page.Links | Where-Object { $_.innerText -match "Datfile" } | Where-Object { $_.innerText -notmatch "BIOS Datfile" } | Select-Object href | Where-Object { $_ }

          foreach ($link in $redump_download_list) {
            
            $source = $redump_baseurl + $link.href
            $destination = "./" + ($link.href -split "/" | Where-Object { $_ } | Select-Object -Last 1) + ".zip"
            
            Invoke-WebRequest -UseBasicParsing -Uri "$source" `
              -OutFile "$destination" `
              -Headers @{
              "Accept"          = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
              "Accept-Encoding" = "gzip, deflate"
            }    
          }

          # $zip_filepath = Get-Item "./" | %{$_.FullName}

          # Create individual dats
          $zip_files = Get-ChildItem -Path $dats_dir | Where-Object { $_.Name -match ".+\.zip" }
          foreach ( $file in $zip_files ) {
              Expand-Archive -Path $file.FullName -DestinationPath "./"
          }

      - name: Upload Redump DATS
        uses: actions/upload-artifact@v3
        with:
          name: dats-redump
          path: ${{ github.workspace }}/*.dat
          if-no-files-found: error
          retention-days: 1

  retool:
    name: Create Retool DATs
    runs-on: windows-latest
    needs: [no-intro, redump]
    strategy:
      matrix:
        provider-dats: [dats-no-intro, dats-redump]
        region: [USA, Europe]
        include:
          - region: USA
            languages: English # separated by ;
          - region: Europe
            languages: English;Spanish;French;German # separated by ;

    steps:

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
          architecture: "x64"

      - name: Checkout retool repo
        uses: actions/checkout@v3
        with:
          repository: unexpectedpanda/retool
          path: retool

      - name: Setup retool
        working-directory: retool
        run: |
          python3 -m pip install bs4 lxml strictyaml
          python3 ".\updateclonelists.py"

      - name: Get Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.provider-dats }}
          path: ${{ matrix.provider-dats }}

      - name: Create retool config files
        working-directory: retool
        run: |
          Set-Content -Path "user-config.yaml" -Value "---"
          Add-Content -Path "user-config.yaml" -Value "language filter:"
          ("${{ matrix.languages }}" -split ";").ForEach({Add-Content -Path "user-config.yaml" -Value "- $_"}) 
          Add-Content -Path "user-config.yaml" -Value "region order:"
          Add-Content -Path "user-config.yaml" -Value "- ${{ matrix.region }}"
          Add-Content -Path "user-config.yaml" -Value @"
          - World
          list prefix:
          list suffix:
          gui settings:
          - output: ${{ github.workspace }}
          - exclude: aAbBcdDemMopPruv
          "@
          Set-Content -Path "user-filters\global.yaml" -Value @"
          ---
          exclude:
          - "Homebrew"
          include:
          "@
          # Get-Content -Path "user-config.yaml"
          # Get-Content -Path "user-filters\global.yaml"          

      - name: Generate Retool DATs
        working-directory: retool
        run: |
          New-Item "dats-retool-${{ matrix.provider-dats }}-${{ matrix.region }}" -Type "Directory"
          python3 ".\retool.py" "${{ github.workspace }}\${{ matrix.provider-dats }}" --output "${{ github.workspace }}\dats-retool-${{ matrix.provider-dats }}-${{ matrix.region }}" -l --exclude aAbBcdDemMopPruv

      - name: Upload Redump DATS
        uses: actions/upload-artifact@v3
        with:
          name: "dats-retool-${{ matrix.provider-dats }}-${{ matrix.region }}"
          path: "dats-retool-${{ matrix.provider-dats }}-${{ matrix.region }}"
          if-no-files-found: error
          retention-days: 1

  create_xml_files:
    name: Create index XML files
    runs-on: windows-latest
    needs: retool

    steps:
      - name: Get Artifacts
        uses: actions/download-artifact@v3
 
      - name: Create XML index files
        run: |
          # Get all dat directories
          $datpaths = Get-ChildItem -Path "${{ github.workspace }}\dats-*"
          # Process each dat directory
          foreach( $datpath in $datpaths ) {
          # Create start of xml index
          $xml_index_filepath = "${{ github.workspace }}\" + ($datpath.Name + ".xml" -replace "^dats-")
          Set-Content -Path $xml_index_filepath -Value '<clrmamepro>' 
          # Process each dat file in the directory
          $datfiles = Get-ChildItem -Path $datpath.FullName | Where-Object {$_.Name -match ".+\.dat"}
          foreach( $file in $datfiles ) {
          [XML]$xmlfile = Get-Content -Path $file.FullName
          $dat_filename = $file.Name -replace ".dat$", ".zip" # files must be zipped!
          $name = $xmlfile.datafile.header.name
          $description = $xmlfile.datafile.header.description
          $version = $xmlfile.datafile.header.version
          $author = $xmlfile.datafile.header.author
          # https://alvaromunoz.github.io/auto-wwwdat/dats/
          $url = "${{ env.WWW_URL }}/${{ env.DATS_DIR }}/" + ($datpath.Name -replace "^dats-") + "/" + $index_filename
          $xml_element = @"
          <datfile>
          <name>$name</name>
          <description>$description</description>
          <version>$version</version>
          <author>$author</author>
          <comment>auto-wwwdat</comment>
          <url>$url</url>
          </datfile>
          "@
          Add-Content -Path "raw_${{ matrix.provider }}.xml" -Value $xml_element
          }
          Add-Content -Path $xml_index_filepath -Value '</clrmamepro>'
          }
      
      - name: Create www dir
        run: |
          New-Item "${{ github.workspace }}\www" -Type "Directory"

      - name: Move indexes to www dir
        run: |
          Move-Item -Path "${{ github.workspace }}\*.xml" -Destination "www"

      - name: Compress Dats to www dir
        run: |
          $datpaths = Get-ChildItem -Path "${{ github.workspace }}\dats-*"
          foreach( $datpath in $datpaths ) {
            $www_zipped_dir_path = ("${{ github.workspace }}\www\" + ($datpath.Name -replace "^dats-"))
            New-Item $www_zipped_dir_path -Type "Directory"
            $datfiles = Get-ChildItem -Path $datpath.FullName | Where-Object {$_.Name -match ".+\.dat"}
            foreach( $file in $datfiles ) {
              Compress-Archive -Path $file.FullName -DestinationPath ($www_zipped_dir_path + "\" + $file.Name + ".zip") -CompressionLevel "Optimal" -Force
            }
          }

      - name: Upload XML indexes
        uses: actions/upload-artifact@v3
        with:
          name: www_site
          path: ${{ github.workspace }}/www
          if-no-files-found: error
          retention-days: 1

  update_git:
    name: Update GIT repo
    runs-on: windows-latest
    if: false
    needs: create_xml_files

    steps:
      - name: Clean Workspace
        uses: yumis-coconudge/clean-workspace-action@v1.0.5

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: publish

      - name: Clean DATs folders
        run: |
          if (Test-Path -Path "docs/${{ env.DATS_DIR }}") {
              Remove-Item "docs/${{ env.DATS_DIR }}" -Recurse
          }
          New-Item -Path "docs/${{ env.DATS_DIR }}" -ItemType Directory

      - name: Get no-intro Artifacts
        uses: actions/download-artifact@v3
        with:
          name: no-intro
          path: docs/${{ env.DATS_DIR }}/no-intro

      - name: Get Redump Artifacts
        uses: actions/download-artifact@v3
        with:
          name: redump
          path: docs/${{ env.DATS_DIR }}/redump

      - name: Get XML Indexes Artifacts
        uses: actions/download-artifact@v3
        with:
          name: XML_indexes
          path: docs/${{ env.DATS_DIR }}

      - name: Update dats on website
        run: |
          ((Get-Content -path ".\docs\index.html" -Raw) -replace 'Last update: .+<',('Last update: {0}<' -f (Get-Date -Format "dddd MM/dd/yyyy HH:mm K"))) | Set-Content -Path ".\docs\index.html"
          git config --global user.name 'Git bot'
          git config --global user.email 'bot@noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git add .
          git commit -am "Auto updated dats"
          git push
