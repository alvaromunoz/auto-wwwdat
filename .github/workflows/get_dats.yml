# This is a basic workflow to help you get started with Actions

name: Get DATs

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  TEMP_DIR: "./docs/dats"
  WWW_URL: "https://alvaromunoz.github.io/auto-wwwdat"
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      - name: Clean Workspace Action
        uses: yumis-coconudge/clean-workspace-action@v1.0.5
      
      - name: Checkout
        uses: actions/checkout@v2

      - name: Create dats folder
        shell: powershell
        run: | 
          Remove-Item ${{ env.TEMP_DIR }} -Recurse -ErrorAction Ignore
          New-Item -Path ${{ env.TEMP_DIR }} -ItemType Directory -ErrorAction Ignore

      - name: Download no-intro DATs
        shell: powershell
        run: |
          $session = New-Object Microsoft.PowerShell.Commands.WebRequestSession
          $session.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.66 Safari/537.36 Edg/103.0.1264.44"

          $datomatic_download_page = Invoke-WebRequest -UseBasicParsing -Uri "https://datomatic.no-intro.org/index.php?page=download&s=64&op=daily" `
            -Method "POST" `
            -WebSession $session `
            -ContentType "application/x-www-form-urlencoded" `
            -Body "dat_type=standard&goooo=Prepare" `
            -MaximumRedirection 0 `
            -ErrorAction Ignore `
            -Headers @{
            "authority"       = "datomatic.no-intro.org"
            "method"          = "POST"
            "path"            = "/index.php?page=download&s=64&op=daily"
            "scheme"          = "https"
            "accept"          = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
            "accept-encoding" = "gzip, deflate, br"
            "cache-control"   = "max-age=0"
            "dnt"             = "1"
            "origin"          = "https://datomatic.no-intro.org"
            "referer"         = "https://datomatic.no-intro.org/index.php?page=download&s=64&op=daily"
          }
          $cookie_data = $datomatic_download_page.Headers.'Set-Cookie' -split ';' -match 'PHPSESSID.+' -split '='
          $session.Cookies.Add((New-Object System.Net.Cookie($cookie_data[0], $cookie_data[1], "/", "datomatic.no-intro.org")))
          $datomatic_download_page.RawContent -match "Location: (.+)"
          $datomatic_download_path = $Matches[1]

          $ProgressPreference = 'SilentlyContinue'
          $nointro_download_url = "https://datomatic.no-intro.org/{0}" -f $datomatic_download_path
          $nointro_download_dest = "{0}/no-intro.zip" -f ${{ env.TEMP_DIR }}
          Invoke-WebRequest -UseBasicParsing -Uri $nointro_download_url `
            -Method "POST" `
            -WebSession $session `
            -ContentType "application/x-www-form-urlencoded" `
            -OutFile $nointro_download_dest `
            -Body "lazy_mode=Download" `
            -Headers @{
            "authority"       = "datomatic.no-intro.org"
            "method"          = "POST"
            "path"            = "/$datomatic_download_path"
            "scheme"          = "https"
            "accept"          = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
            "accept-encoding" = "gzip, deflate, br"
            "cache-control"   = "max-age=0"
            "dnt"             = "1"
            "origin"          = "https://datomatic.no-intro.org"
          }

      - name: Download redump DATs
        shell: powershell
        run: |
          $redump_baseurl = "http://redump.org"
          $redump_download_page = Invoke-WebRequest -Uri "$redump_baseurl/downloads/"
          $redump_download_list = $redump_download_page.Links | Where-Object { $_.innerText -match "Datfile" } | Where-Object { $_.innerText -notmatch "BIOS Datfile" } | Select-Object href | Where-Object { $_ }

          foreach ($link in $redump_download_list) {
            
            $source = $redump_baseurl + $link.href
            $destination = ${{ env.TEMP_DIR }} + "/" + ($link.href -split "/" | Where-Object { $_ } | Select-Object -Last 1) + ".zip"
            
            Invoke-WebRequest -UseBasicParsing -Uri "$source" `
              -OutFile "$destination" `
              -Headers @{
              "Accept"          = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
              "Accept-Encoding" = "gzip, deflate"
            }    
          }

      - name: Extract and clean DATs
        shell: powershell
        run: |

          # Extract dats from zips
          $zipfiles = Get-ChildItem -Path ${{ env.TEMP_DIR }} | Where-Object {$_.Name -match ".+\.zip"}
          foreach( $file in $zipfiles ) {
            Expand-Archive -LiteralPath $file.FullName -DestinationPath $file.DirectoryName
          }

          # Remove non dat files
          $nodatfiles = Get-ChildItem -Path ${{ env.TEMP_DIR }} | Where-Object {$_.Name -notmatch ".+\.dat"}
          foreach( $file in $nodatfiles ) {
            Remove-Item $file.FullName
          }

          # Rename dat files
          $datfiles = Get-ChildItem -Path ${{ env.TEMP_DIR }} | Where-Object {$_.Name -match ".+\.dat"}
          foreach( $file in $datfiles ) {
            $newname = $file.Name -replace '(.+) \(.+\.dat', '$1.dat'
            Rename-Item -Path $file.FullName -NewName $newname
          }

      - name: Create XML
        shell: powershell
        run: |
          Set-Content -Path ${{ env.TEMP_DIR }}/raw_dat_clrmamepro.xml -Value '<clrmamepro>'

          $datfiles = Get-ChildItem -Path ${{ env.TEMP_DIR }} | Where-Object {$_.Name -match ".+\.dat"}
          
          foreach( $file in $datfiles ) {
            [XML]$xmlfile = Get-Content -Path $file.FullName
            $name = $xmlfile.datafile.header.name
            $description = $xmlfile.datafile.header.description
            $version = $xmlfile.datafile.header.version
            $author = $xmlfile.datafile.header.author
            $url = ${{ env.WWW_URL }}/$file.Name
            $file = $file.Name

            $xmlelement=@"
              <datfile>
                <name>$name</name>
                <description>$description</description>
                <version>$version</version>
                <author>$author</author>
                <comment>Hosted on github ${{ env.WWW_URL }}</comment>
                <url>$url</url>
                <file>$file</file>
              <datfile>
              "@

            Add-Content -Path ${{ env.TEMP_DIR }}/raw_dat_clrmamepro.xml -Value $xmlelement
          }
          Add-Content -Path ${{ env.TEMP_DIR }}/raw_dat_clrmamepro.xml -Value '</clrmamepro>'

      - name: Update dats on website
        run: |
          git config --global user.name 'Git bot'
          git config --global user.email 'bot@noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git commit -am "Auto updated dats" && git push || echo "New dats"

